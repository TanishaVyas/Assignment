const express = require("express");
const router = express.Router();
const Contact = require("./contact_model");

function extractPrimaryContacts(contacts) {
  const primaryContactsMap = new Map();
  contacts.forEach((c) => {
    if (c.linkPrecedence === "primary") {
      primaryContactsMap.set(c.id, c);
    } else if (c.linkedId) {
      const linkedPrimary = contacts.find((x) => x.id === c.linkedId);
      if (linkedPrimary && linkedPrimary.linkPrecedence === "primary") {
        primaryContactsMap.set(linkedPrimary.id, linkedPrimary);
      }
    }
  });
  return [...primaryContactsMap.values()];
}

function isNewData(email, phoneNumber, contacts) {
  const emailMatch = contacts.find((c) => c.email === email);
  const phoneMatch = contacts.find((c) => c.phoneNumber === phoneNumber);
  return {
    isNewEmail: email && !emailMatch,
    isNewPhone: phoneNumber && !phoneMatch,
    emailMatch,
    phoneMatch,
  };
}

async function createNewPrimary(email, phoneNumber) {
  await Contact.createnewcontact(email, phoneNumber);
  const [newContact] = await Contact.findContactByEmailOrPhone(
    email,
    phoneNumber
  );
  return newContact.id;
}

async function convertNewerPrimariesToSecondary(primaryContacts) {
  primaryContacts.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
  const oldestPrimary = primaryContacts[0];
  for (let i = 1; i < primaryContacts.length; i++) {
    await Contact.updateToSecondary(primaryContacts[i].id, oldestPrimary.id);
  }
  return oldestPrimary.id;
}

async function createSecondaryIfNeeded(
  isNewEmail,
  isNewPhone,
  email,
  phoneNumber,
  linkedId
) {
  if (isNewEmail || isNewPhone) {
    await Contact.create_secondary_Contact({
      email: email || null,
      phoneNumber: phoneNumber || null,
      linkedId,
      linkPrecedence: "secondary",
    });
  }
}

async function buildContactResponse(primaryContactId) {
  const allContacts = await Contact.findAllLinkedContacts(primaryContactId);
  const emails = [...new Set(allContacts.map((c) => c.email).filter(Boolean))];
  const phoneNumbers = [
    ...new Set(allContacts.map((c) => c.phoneNumber).filter(Boolean)),
  ];
  const secondaryContactIds = allContacts
    .filter((c) => c.linkPrecedence === "secondary")
    .map((c) => c.id);

  return {
    primaryContactId,
    emails,
    phoneNumbers,
    secondaryContactIds,
  };
}

router.post("/identify", async (req, res) => {
  const { email, phoneNumber } = req.body;

  if (!email && !phoneNumber) {
    return res.status(400).json({
      error: "At least one of email or phoneNumber is required.",
    });
  }

  try {
    let primaryContactId = 0;

    const matchedContacts = await Contact.findContactByEmailOrPhone(
      email,
      phoneNumber
    );

    if (matchedContacts.length === 0) {
      primaryContactId = await createNewPrimary(email, phoneNumber);
    } else {
      const { emailMatch, phoneMatch, isNewEmail, isNewPhone } = isNewData(
        email,
        phoneNumber,
        matchedContacts
      );

      const primaryContacts = extractPrimaryContacts(matchedContacts);
      // check if email and phone number have differnet primary contacts
      if (
        email &&
        phoneNumber &&
        emailMatch &&
        phoneMatch &&
        emailMatch.id !== phoneMatch.id &&
        emailMatch.linkPrecedence === "primary" &&
        phoneMatch.linkPrecedence === "primary"
      ) {
        primaryContactId = await convertNewerPrimariesToSecondary(
          primaryContacts
        );
      } else {
        const baseContact = emailMatch || phoneMatch;
        primaryContactId =
          baseContact.linkPrecedence === "primary"
            ? baseContact.id
            : baseContact.linkedId;

        await createSecondaryIfNeeded(
          isNewEmail,
          isNewPhone,
          email,
          phoneNumber,
          primaryContactId
        );
      }
    }

    const response = await buildContactResponse(primaryContactId);
    return res.json({ contact: response });
  } catch (err) {
    console.error("Error in /identify:", err);
    res.status(500).json({ error: "Internal server error" });
  }
});

module.exports = router;
